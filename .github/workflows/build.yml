name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  devcontainers:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: 
      run: |
        set -x
        npm install -g @devcontainers/cli
        IMAGE_ID=ghcr.io/$GITHUB_REPOSITORY/devcontainers-ocaml.ci
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        old_id=''
        if docker pull $IMAGE_ID; then
          old_id=$(docker image inspect $IMAGE_ID --format "{{.ID}}")
        fi
        devcontainer build --image-name $IMAGE_ID --cache-from $IMAGE_ID --workspace-folder .
        devcontainer up --workspace-folder .
        devcontainer exec --workspace-folder . ocaml --version
        if [ "$old_id" != "$new_id" ]; then
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag $image $IMAGE_ID:latest
          docker push $IMAGE_ID:latest || true
          rm -rf ~/.docker
        fi
    - name: dune
      run: |
        set -x
        devcontainer exec --workspace-folder . dune build
        devcontainer exec --workspace-folder . dune test
        devcontainer exec --workspace-folder . dune exec example
  CI:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        ocaml-compiler:
          - 4.14.x
          - 4.13.x
          - 4.08.x
          - 4.06.x
          - 4.06.x
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - run: opam install . --deps-only --with-doc --with-test

      - run: opam exec -- dune build

      - run: opam exec -- dune runtest

      - run: opam exec -- dune exec example
